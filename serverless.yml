service: qiilog

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  region: ap-northeast-1

  environment:
    NODE_ENV: production
    API_RESOURCES_BUCKET_NAME: ${env:API_RESOURCES_BUCKET_NAME}
    API_RESOURCES_BUCKET_URL: ${env:API_RESOURCES_BUCKET_URL}${self:provider.environment.API_RESOURCES_BUCKET_NAME}

package:
  individually: true

custom:
  customDomain:
    domainName: "${self:provider.stage}.${env:HOSTNAME}"
    stage: ${opt:stage, 'dev'}
    region: ap-northeast-1
    certificateName: "*.${env:HOSTNAME}"
    createRoute53Record: true
  serverless-offline:
    port: 4000
  apigwBinary:
    types:
      - '*/*'

functions:
  nuxt-renderer:
    runtime: nodejs8.10
    handler: handler.render
    memorySize: 512
    timeout: 30
    package:
      exclude:
        - src/**
        - workers/**
        - .vscode/**
        - package.json
        - tsconfig.json
        - tslint.json
        - yarn.lock
    events:
      - http:
          path: /
          method: ANY
          cors: true
      - http:
          path: /{proxy+}
          method: ANY
          cors: true

  get-qiita-items:
    runtime: go1.x
    handler: workers/get-qiita-items/bin/main
    timeout: 300
    role: GetQiitaItemsRole
    package:
      exclude:
        - ./**
      include:
        - workers/get-qiita-items/bin/**
    events:
      - schedule: cron(0 * * * ? *)
    environment:
      BUCKET: ${self:provider.environment.API_RESOURCES_BUCKET_NAME}
      KEY: items.json
      QIITA_ACCESS_TOKEN: ${env:QIITA_ACCESS_TOKEN}

resources:
  Resources:
    GetQiitaItemsRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: GetQiitaItemsRole
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: allowS3Policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement: [
                {
                  Action: ['s3:PutObject'],
                  Effect: 'Allow',
                  Resource: {
                    Fn::Join: ['', ['arn:aws:s3:::', { Ref: 'ApiResourcesBucket' }, '/*']],
                  }
                },
                {
                  Action: ['lambda:*'],
                  Effect: 'Allow',
                  Resource: "*"
                },
              ]

    ApiResourcesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.API_RESOURCES_BUCKET_NAME}
    ApiResourcesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ApiResourcesBucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement: [
            {
              Action: ['s3:GetObject'],
              Effect: 'Allow',
              Resource: {
                Fn::Join: ['', ['arn:aws:s3:::', { Ref: 'ApiResourcesBucket' }, '/*']],
              },
              Principal: '*'
            },
          ]

plugins:
  - serverless-offline
  - serverless-apigw-binary
  - serverless-domain-manager
  - serverless-dotenv-plugin
